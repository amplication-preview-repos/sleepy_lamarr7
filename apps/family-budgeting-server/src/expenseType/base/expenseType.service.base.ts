/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ExpenseType as PrismaExpenseType,
  Expense as PrismaExpense,
} from "@prisma/client";

export class ExpenseTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExpenseTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.expenseType.count(args);
  }

  async expenseTypes(
    args: Prisma.ExpenseTypeFindManyArgs
  ): Promise<PrismaExpenseType[]> {
    return this.prisma.expenseType.findMany(args);
  }
  async expenseType(
    args: Prisma.ExpenseTypeFindUniqueArgs
  ): Promise<PrismaExpenseType | null> {
    return this.prisma.expenseType.findUnique(args);
  }
  async createExpenseType(
    args: Prisma.ExpenseTypeCreateArgs
  ): Promise<PrismaExpenseType> {
    return this.prisma.expenseType.create(args);
  }
  async updateExpenseType(
    args: Prisma.ExpenseTypeUpdateArgs
  ): Promise<PrismaExpenseType> {
    return this.prisma.expenseType.update(args);
  }
  async deleteExpenseType(
    args: Prisma.ExpenseTypeDeleteArgs
  ): Promise<PrismaExpenseType> {
    return this.prisma.expenseType.delete(args);
  }

  async findExpenses(
    parentId: string,
    args: Prisma.ExpenseFindManyArgs
  ): Promise<PrismaExpense[]> {
    return this.prisma.expenseType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .expenses(args);
  }
}
