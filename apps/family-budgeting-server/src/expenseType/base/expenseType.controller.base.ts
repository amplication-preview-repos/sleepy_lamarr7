/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExpenseTypeService } from "../expenseType.service";
import { ExpenseTypeCreateInput } from "./ExpenseTypeCreateInput";
import { ExpenseType } from "./ExpenseType";
import { ExpenseTypeFindManyArgs } from "./ExpenseTypeFindManyArgs";
import { ExpenseTypeWhereUniqueInput } from "./ExpenseTypeWhereUniqueInput";
import { ExpenseTypeUpdateInput } from "./ExpenseTypeUpdateInput";
import { ExpenseFindManyArgs } from "../../expense/base/ExpenseFindManyArgs";
import { Expense } from "../../expense/base/Expense";
import { ExpenseWhereUniqueInput } from "../../expense/base/ExpenseWhereUniqueInput";

export class ExpenseTypeControllerBase {
  constructor(protected readonly service: ExpenseTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExpenseType })
  async createExpenseType(
    @common.Body() data: ExpenseTypeCreateInput
  ): Promise<ExpenseType> {
    return await this.service.createExpenseType({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExpenseType] })
  @ApiNestedQuery(ExpenseTypeFindManyArgs)
  async expenseTypes(@common.Req() request: Request): Promise<ExpenseType[]> {
    const args = plainToClass(ExpenseTypeFindManyArgs, request.query);
    return this.service.expenseTypes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExpenseType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async expenseType(
    @common.Param() params: ExpenseTypeWhereUniqueInput
  ): Promise<ExpenseType | null> {
    const result = await this.service.expenseType({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExpenseType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExpenseType(
    @common.Param() params: ExpenseTypeWhereUniqueInput,
    @common.Body() data: ExpenseTypeUpdateInput
  ): Promise<ExpenseType | null> {
    try {
      return await this.service.updateExpenseType({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExpenseType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExpenseType(
    @common.Param() params: ExpenseTypeWhereUniqueInput
  ): Promise<ExpenseType | null> {
    try {
      return await this.service.deleteExpenseType({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/expenses")
  @ApiNestedQuery(ExpenseFindManyArgs)
  async findExpenses(
    @common.Req() request: Request,
    @common.Param() params: ExpenseTypeWhereUniqueInput
  ): Promise<Expense[]> {
    const query = plainToClass(ExpenseFindManyArgs, request.query);
    const results = await this.service.findExpenses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        description: true,
        date: true,
        typeField: true,

        expenseType: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expenses")
  async connectExpenses(
    @common.Param() params: ExpenseTypeWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenses: {
        connect: body,
      },
    };
    await this.service.updateExpenseType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expenses")
  async updateExpenses(
    @common.Param() params: ExpenseTypeWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenses: {
        set: body,
      },
    };
    await this.service.updateExpenseType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expenses")
  async disconnectExpenses(
    @common.Param() params: ExpenseTypeWhereUniqueInput,
    @common.Body() body: ExpenseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenses: {
        disconnect: body,
      },
    };
    await this.service.updateExpenseType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
